#. What is Lightning Web Component(LWC)?
==> LWC is a framework developed by salesforce for building web 
	aplication on the Salesforce plateform.It uses we standards 
	like HTML, CSS and Javascript to create reusable and high-performing
	component.


#. Explain the concept of data binding in LWC
==> Data binding in LWC establishes a connection between the
	component's javascript code and its HTML template. it enables 
	dynamic updates and synchronization of data between the component'salesforce
	properties and the UI.

#. How do you comminucattes between LWC components?
==> LWC provides various methods for component communication. These
	Include property binding for parent-child communication,events for 
	child-parent comminucation and the publish-subscribe pattern for
	communication between unrelated components.

#. How can you communication between parent and child component in LWC?
==> Communication between parent and child components in LWC can be achieved
	through property binding and event handling. The parent component
	can pass data to the child component using property binding, and the 
	child component	can notify the parent component of any events using 
	custom events

#. How do you handle error and exception in lWC?
==> Error handling in LWC can be done using try-catch blocks or
	leveraging the onError lifecycle hook. tou can catch exceptions
	and display appropriate error message to the user, ensuring a smooth
	user experience.
	
	
#. How do you handle user input in LWC?
==> LWC provides mechanism to handle user input, such as using event handlers,
	two-way data binding, and reactive properties. Event handlers can be used 
	to capture user actions like button clicks or input changes.
	
===========================================================================================	
	
#. What is a decorator?
==> Decorators are design patterns that will be adding functionality
	into the properties and function in LWC.
	
==> There are three types of Decorator in LWC
	1. track
	2. Api
	3. Wire
==> @API decorator will be used to make these properties and function
	publicly available between components.
	
==> All public properties are reactive. Reactive means the framework
	observes the property for change.When property change value then
	The framework reacts and renders the component.


==> @Track decorator that will be making the property and the methods 
	as a private and property that can only be accessed within the 
	component only and can't be used outside the component.
	
==> @Wire decorator that will be used to call the apex method, and with
	the help of those apex method we can retrive the data and we 
	can show the data on the LWC component
==> Wire methods are immutable. So you can't change the record.
==> To use AuraEnabled( cacheable = true)

==================================================================================================
	
#. Explain the life cycle hooks of an LWC component.
==> The lifecycle hooks of an LWC component refer to a series 
	of methods that are invoked during the time of component 
	creation, update, and removal from the DOM. These method provide
	a way to interact and manipulate the component at different stages
	of its lifecycle.
	
	
	#. Creation:
	1. Constructor():
		==> This is the first hook to run when an instance of the component
			is created. It's where you initialize variables and set default values.
		
		==> Invoked when the instance of the component is created.
		==> fired in the parent component first since it flows from parent to child.
		==> You have to call super() inside first to callthe  parent class constructor.
	
	#. Intialization:
	2. connectedCallBack():
		==> After the component is initialized, this hook is called.it's an
			It is the ideal place for DOM manipulation and data retrieval.
			
		==>Invoke when component is inserted into DOM.
		==> it flows Parent to child.
		==> Used for to perform initialisation task such as fetching data, set upate
			cache and listen for events.
		==> To check if a component is connected in DOM, use the isConnected method.

			
	#. Rendering:
	3. renderedCallback():
		==> Use it to perform logic after a component has finished the rendering
		    phase. It is invoked when a component is completely rendered on UI.
		==> Flow from child to parent component.
		==> Component rendered many times during the lifecycle, to track renderedBack(),
			use isRendered boolean field.
		==> Property leads to infinite loop in renderedCallBack().
		
	
	#. Reactivity:
		==> Whenever a property or variable changes in the component, it may
		trigger a reactivity cycle. During this cycle, the component checks 
		for changes in properties, and if changes are detected, it re-renders 
		and invokes the "renderedCallBack" again.
		
	#. Destruction:
		4. DisconnectedCallback():
		==> When the component is removed from the DOM, this hook is called.
		    It's an excellent place for cleanup operations and releasing resources 
			like event listeners.
		 
		 ==> Called when the element is removed from a document(remove event listener, remove time interval etc)
		 ==> follow parent to child
		 
	#. Error Handling:
		5. ErrorCallback()
		==> If an error occurs during rendering, this hook is invoked.
		    It provides an opportunity to fracefully handle error and 
			Display an appropriate message.
		
		==> Two argumewnts are passed in errorCallback(error,stack), the error
			argument is a Javascript native error object, and the stack argument
			is a string.
	
	
=================================================================================================================================================

#. How to send data from parent to child in LWC?
==> There are 3 ways to do it.
		1. Public Properties
		2. Public Function
		3. Public Properties with getter-setter
		
1. https://www.linkedin.com/pulse/how-send-data-from-parent-child-lwc-gaurav-gupta/


		

====================================================================================================================================================
1. What is the difference between let and var?
==> Both let and var are used for declaring variables, but they have key differences in scope, hoisting, and redeclaration.
==> var is accessible outside the block, but let is not.

	function test() {
		if (true) {
			var x = 10; // Function-scoped
			let y = 20; // Block-scoped
		}
		console.log(x); // ✅ Works (x is accessible outside the if block)
		console.log(y); // ❌ Error (y is only accessible inside the if block)
	}
		
		
==> var can be redeclared in the same scope.
==> let cannot be redeclared in the same scope.

	var a = 10;
	var a = 20; // ✅ No error

	let b = 30;
	let b = 40; // ❌ Error: Identifier 'b' has already been declared
		
		

=============================================================================================================================================
1. Can we call the apex class fromthe  constructor of the lWC?
==> We can call the apex from the constructor. 
==> We can call the apex from the Wire method. 
==> We can call the apex from the connected call back. 
==> We can call apex from the render callback.


2. If we can call apex from the wire and constructor. which one can call first?
==> Constructor (constructor()) → Runs first when the component is initialized.
==> @wire Method → Runs after the component is connected to the DOM.
==> connectedCallback() → Runs after the constructor, before rendering.

3. How do you communicate between two unrelated components?
==> There are two approaches. one is PubSub and another is LMS(Lightning message service)

4. You have a data table. picklist and lookup fields. What is your approach?
==> For lookup, we can use the "lightning record picker".
==> For picklist, we can use combobox.

5. To restrict an LWC component so that it only appears on the Account record detail page and not on the Contact or other record pages.
==> You need to configure its meta.xml file.

<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata"
    fqn="MyAccountComponent">
    <apiVersion>59.0</apiVersion> 
    <isExposed>true</isExposed> 
    <targets>
        <target>lightning__RecordPage</target>
    </targets>
    <targetConfigs>
        <targetConfig targets="lightning__RecordPage">
            <objects>
                <object>Account</object> 
            </objects>
        </targetConfig>
    </targetConfigs>
</LightningComponentBundle>


==> <target>lightning__RecordPage</target> → Makes it available only on record pages.
==> <object>Account</object> → Restricts it only to the Account record page. 


6. What is set timeout in lwc? (LWC disconnected callback)
==> In Lightning Web Components (LWC), setTimeout is a JavaScript function used to execute a piece of code after a specified delay (in milliseconds). It is commonly used for:
==> Delaying execution
==> Running code asynchronously
==> Improving performance by deferring non-critical operations

7. isExpose = true. If anyone has an update from true to false. what will happen.
==> Are you deploying the component or not? If you deployed, then no issue. but you did not deploy it then it will not show.


8. When is the error callback executed, and what benefit to using an error callback?
==> The error callback in LWC executes when there is an error or exception in a component during:
	==> Rendering (render())
	==> Lifecycle hooks (connectedCallback, renderedCallback, etc.)
	==> Event handling (@wire, Apex calls, async functions, etc.)
	
	
	Benefits of Using ErrorCallback
		==>	Better Debugging → Catches errors and logs them for debugging.
		==>	Prevents Component Failure → Stops components from breaking the entire page.
		==>	Handles Child Component Errors → Allows parent components to catch child errors.
		==>	Custom Error Messages → Can show user-friendly error messages instead of system errors.
	
9. When is Track Decorator used?
==> For Nested Objects & Arrays (Deep Property Changes Not Detected Automatically)
==> For Performance Optimization in Complex Components
==> When UI Does Not Auto-Update on Object Property Change
	
	
1. What isthe  difference between LWC and AURA components?
==> LWC Fatser --> Optimize for browser execution
==> Uses Standard Web technology
==> Better for modern Developement --> Support ES6+, Shadow DOM and Web Standard.
==> Better Reusability --> LWC can be used inside AURA, but Aura can't be used inside LWC.


2. What is a decorator?
==> Decorators are a special javascript annotation used to enhance the behavior and function in a class.
==> They manage reactivity, data binding, and communication between components.
==> There are three types of decorator
	
	1. @api Decorator:
		==> The @API decorator in Salesforce is used to expose a property or method in a child component, making it accessible to the parent component.
		==> Used to Parent-to-child component.
		==> Allow public properties in a child Component.
		==> Supports primitive values, objects, and arrays.
		==> @API decorator will be used to make these properties and function
			publicly available between components.
			
		EX:
		ChildComponent:
		---------------
		import {LightningElement, api} from 'LWC';
		export default class ChildComponent extends LightningElement {
			@api message;
		}
		
		HTML:
		<template>{message}</template>
		
		ParentComponent:
		----------------
		import {'LightningElement,api} from 'LWC';
		export default class ParentComponent extends LightningElement{
		}
		
		HTML:
		<Template><c-child-component={Hello, I am Parent Class}><c-child-component></Template>
	
	2. @track Decorator:
		==>  @Track decorator that will be making the property and the methods 
			as a private and property that can only be accessed within the 
			component only and can't be used outside the component.
		
	3. Wire Decorator:
		==> The @wire decorator in LWC is used to fetch data from APEX methods, Salesforce UI API(getRecord,getListUi,getObjectInfo) , or other adapters.
		==> It automatically retrieves data and reactively updates the component whenever the data changes.
	
		EX:
			
		public with sharing class AccountController{
			@AuraEnabled(cacheable = true)
			public static List<Account> getAllAccountRecord(){
				return [Select id,Name Phone, industry from Account LIMIT 10];
			}
		}	
			
		LWC:

		import {LightningElement,wire} from 'LWC';
		import getAllAccountRecord from '@salesforce/apex/AccountController.getAllAccountRecord';
		COLUMNS [{label:'Account Name',fieldName:'Name',type:'text'},
				 {label:'Phone',fieldName:'Phone',type:'phone'},
				 {lable:'Industry',fieldName:'Industry',type:'text'}];

		export default class AccountDataTable extends LightningElement{
		  @Track account = [];
		  columns = COLUMNS;
		  @wire(getAllAccountRecord) 
		  account({error,data}){
			if(data){
				this.account = data;
			}else if(error){
			 // Showing error;
			}
		  }
		}		 
			
			
		HTML:
		-----
		<template>
			<Lightning-datatable
			key-field = "id"
			data = {account}
			columns = {columns}
			hide-checkbox-column = "true"
			></lightning-datatable>
		</template?
			

3. What is LDS?
==> Lighntning Data Service(LDS) is a standardized way to work with salesforce records in LWC and Aura. 
==> It eliminates the need for writing apex methods to fetch,create,update or delte records.

EX:
---
	import {LightningElement} from 'WLC';
	import {getRecord} from 'lightning/uiRecordApi';
	import ACCOUNT_NAME from '@Salesforce/Schema/Account.Name';
	import ACCOUNT_PHONE from '@Salesforce/Schema/Account.phone';
	
	export default class LDSComponent extends Lighntning{
		recordId = '00012344354dfr';
		accountData;
		@wire(getRecord,{recordId:'$recordId',fields:[ACCOUNT_NAME,ACCOUNT_PHONE]})
		wireAccount({error,data}){
			if(data){
				accountData = data.fields;
			}
			else if(error){}
		}
	}
	
	<template>
		<template if:true={accountData}>
			<p><b>Account Name : {accountData.Name} </b></p>
			<p><b>Account Phone : {accountData.Phone}</b></p>
	</template>
	
	
9. When Track Decorator use?
==> For Nested Objects & Arrays (Deep Property Changes Not Detected Automatically)
==> For Performance Optimization in Complex Components
==> When UI Does Not Auto-Update on Object Property Change



#. Pubs subs (Lightning message Service)
	

#. How does imperatice call different from wire call in lwc
	

	

	
	
