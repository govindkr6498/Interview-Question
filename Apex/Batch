#. Batch Programming / Batch Apex:-
===================================
==> Max. of 50 Million Records --> By dividing the record to the various batches.
	
	--> To perform the Long Running Operations.
	--> Always Running outside of the Organization, by placing inside the Apex Queue.
	
	Step 1: Create a Batch Class with Global Access Specifier, and Implements the class
			with an interface "Database.Batchable".
			
			Syntax:
			
			      Global Class <ClassName> implements Database.batchable<SObject>
				  {
					// Write the Logic
				  }
	
	
	Step 2: Write the interface Methods inside the Class and Write the bussiness Logic..
		
		Syntax:
		
		Global class <ClassName> implements Database.Batchable<SObject>
		{
			Global Database.queryLocator start(Database.batchableContext <refName>)
			{
				// Write the Bussniess Logic to get the required record from the Object and 
				return the Starting memory Address
			}
			
			Global void Execute(Database.batchableContext <RefName> List<SObject> <parName>)
			{
				// Write the Bussiness Logic
			}
			
			Global void finish(Database.BatchableContext <refName>)
			{
				// write the Post-Execute Logic
			}
		}
		
		
Step 3: Invoke the Batch Class.
	
		1. Create the Batch Class Object.
		2. Execute the Btach Class by using "Database.ExecuteBatch()" method
		
		Syntax:
			
			<BatchClassName> <BatchClassObjectName> = New <BatchClassName>();
			Id jobId = Database.ExecuteBatch(<BatchClassObjectName>, <BatchSize>);

Step 4: Track the status of the Batch Class by using the below ways.
	
		
================================================================================================
#. Usecase:-
=============
==> Create a Batch Job, to update All the Account Record  by assigning the values
	a below, by dividing the records to the various batches of size "5".
	
		Account: Rating = 'Hot'
		Account: Industry = "manufacturing"
		Account: AnnualRevenue = 750000
		Account: Active = 'Yes'
	
	COntroller Code:
	----------------
	
		Global class UpdateAccountRecordBatchJob implements Database.Batchable<SObject>{
			Global Database.QueryLocator Start(Database.BatchableContext bc){
				String accountQuery = 'Select id,name,annualRevenue,Industry,Active__c,rating from Account';
				return Database.getQueryLocator(accountQuery);
			}
			Global void execute(Database.batchableContext bc, List<SObject> recordToProcess){
				if(!recordToProcess.isEmpty()){
					List<Account> updateAccRecordList = New List<Account>();
					for(SObject sObj : recordToProcess){
						Account accRecord = (Account) sObj;
						accRecord.Rating = 'Hot';
						accRecord.Industry = 'Manufacturing';
						accRecord.AnnualRevenue = 750000;
						accRecord.Active__c = 'Yes';
						updateAccRecordList.add(accRecord);
					}
					if(!updateAccRecordList.isEmpty()){
						update updateAccRecordList;
					}
				}
			}
			Global void finish(Database.batchableContext bc){
				System.debug('Account Record update Successfully!...');
			}
		}
	
	Execute Process:
	----------------
	
	UpdateAccountRecordBatchJob objName = New UpdateAccountRecordBatchJob();
	Id jobId = Database.executeBatch(objName,5);
	
	
================================================================================================================================

#. State Management:
====================

Usecase:
========
		Create a Batch Job, to calculate the Total AnnualRevenue of all Lead Records
		exist inside the Organization, by dividing the records to the various batches
		of size 10.
		
		Batch Class Name:
		-----------------
		
			Global class CalculateLeadsTotalRevenueBatch implements Database.Batchable<SObject>, Database.Stateful{
				Global Decimal totalAnualRevenue = 0.0;
				Global Database.QueryLocator start(Database.BatchableContext bContext){
					String leadQuery = 'Select id,firstName,lastName, annualRevenue from lead where annualRevenue != Null';
					return Database.getQueryLOcator(leadQuery);
				}
				Global void execute(Database.BatchableContext bContext, List<Lead> leadRecord){
					if(!leadRecord.isEmpty()){
						for(Lead ld : leadRecord){
							totalAnualRevenue += ld.AnnualRevenue;
						}
						System.debug('totalAnualRevenue --------------->'+totalAnualRevenue);
					}
				}
				Global void finish(Database.BatchableContext bContext){
					System.debug('Total Annual Revenue added on Lead Record is : '+totalAnualRevenue);
				}
			}
	
	
	
	
	
=========================================================================================================================

#. Future Method:-
------------------
==> 
==> Objects:
			|
			 --> 2 Types 
				
				1. Setup Objects:
					--> Setup objects are used to intract with the salesforce metadata
					    for the declarative Development.
					
					EX:
						User, Profile, BussinessProcess, CustomField, CustomeObject,
						CustomTab, Docuement, Group,FieldSet, RecordType,
						SearchLayout, validatonRule,
						WorkflowRule,...etc.
						
				
				2. Non-Setup Objects:
					--> Remaining All Standard and custom objects are comes under
					    "Non-Setup" objects.
						
					EX:
						Account,Contact,Lead,Opportunity,..etc.
						Hiring_Manager__c, Position__c,Customer__c,Branch_c,
						Loan__c,..etc.
						
		NOTE:-
			When the User tries to perform the DML Operations on both "Setup" and 
			"Non-Setup" Objects within a Transaction, Salesforce will raise an 
			Exception "Mixed_DML_Operation" exception.
			
Example of DML Exception:
-------------------------			
User Object ---> Setup Object
		|
		 --> De-Activate the User through Programming

Hiring Manager Object --> Non-Setup Object
		|
		 --> Create a Hiring Manager Record.
		 
	Class Name:-
	-------------
		public class CommonHelper {
			public static void mixedDMLOperation(){
				// De-Activate user
				User deActivateUser = [Select id, username, isActive from user where username = 'govind15@gmail.com' Limit 1];
				if(deActivateUser.id != Null){
					deActivateUser.IsActive = false;
					update deActivateUser;
				}
				
				// Insert Account Record Or Hiring Manager
				Account acc = New Account();
				acc.Name = 'Account Test 001';
				acc.Phone = '9087654321';
				acc.Email__c = 'emailk@gmail.com';
				insert acc;
			}
		}
		
#. #. A trigger to automatically create a user when a contact  has been created.
	
public class CreateAccountAndCreateUserController {
    public static void createAccountRecordMethod(List<Account> accList){
        crateUser();
    }
    @Future
    public static void crateUser(){
        Profile p = [SELECT Id FROM Profile WHERE Name= 'Standard User' limit 1];     
        User u = new user();
        u.LastName = 'Test Code Welcome';
        u.Email = 'gvoindsingh6498@gmail.com';
        u.Alias = 'Tcode';
        u.Username = 'iquestbee@gmail.com';
        u.CommunityNickname = 'test1211';
        u.LocaleSidKey = 'en_US';
        u.TimeZoneSidKey = 'GMT';
        u.ProfileID = p.id;
        u.LanguageLocaleKey = 'en_US';
        u.EmailEncodingKey = 'UTF-8';
        insert u;
    }
}
		
#. Future Method Rules:
-----------------------
1. Method should be pre-fixed with "@future()" annotation.

2. Future Methods should be always defined with "Static" keyword.

3. future method doesn't return any value to the calling environment. So that future
   method return type should be always "Void".
   
4. We can supply the parameters to the future method which should be of "Primitive Data Type"
	(String,Arrays,COllection).
	We can't supply the Sobject Type of parameters to the Future methods.
	
EX:
	@Future()
	public static void createHrRecord(String customerName, String[] countryNames,List<String> lstNames)
	{
	}

5. One future method can't invoke an another future method.(cahining Process Not Available)

6. Doesn't provide any Tracking Mechanism.



1. what is mixed DML Operation?
==> A Mixed DML Operation error occurs when you try to perform DML (Data Manipulation Language) operations 
	on setup (configuration) and non-setup (standard/custom) objects in the same transaction.
	
	Setup Object ==> User, Profile, BussinessProcess, CustomField, CustomeObject.
	No-Setup Object ==> Account,Contact,Lead,Opportunity,Hiring_Manager__c, Position__c,Customer__c,Branch_c,


2. Difference between Method overloading and overriding?
==> Method Overloading
		==> Defining multiple methods with the same name but different parameters in the same class.

==> Method Overriding		
		==> Redefining a method in a child class that is already defined in the parent class.
		
EX: // Example of Method Overloading

	public class OverloadingExample {
		public void showMessage(String msg) {
			System.debug('Message: ' + msg);
		}
		public void showMessage(String msg, Integer count) {
			for (Integer i = 0; i < count; i++) {
				System.debug('Message: ' + msg);
			}
		}
	}
 
EX: // Example of Method Overriding
	
	public class ParentClass {
		public virtual void display() {
			System.debug('This is ParentClass');
		}
	}

	public class ChildClass extends ParentClass {
		@Override
		public void display() {
			System.debug('This is ChildClass');
		}
	}


3. What is the maximum depth reach in Salesforce?
==> In Salesforce, Maximum Depth Reach refers to the limit on the recursive execution of triggers, workflow rules, process builder, and flows.
==> Salesforce prevents infinite loops by limiting the number of recursive calls in a trigger.
==> The maximum depth a trigger can recursively call itself is 16 times.

4. How to manage recursive?
==> We can manage recursive using Set, Map and Boolean. but boolean is used for a maximum of 200 records.

5. How many records are executed in a single time?
==> 200


6. Why use global in batch class?
==> In Salesforce, the global access modifier is required in batch classes because batch jobs can be called from different namespaces. 
	If a batch class is only public, it cannot be accessed from outside the current namespace, 
	which is essential for managed packages or when executing the batch job from external contexts like REST API calls.


7. why use Database.Batchable ?
==> In Salesforce, Database.Batchable is an interface that allows you to process large amounts of records asynchronously in smaller chunks (batches). 
==> This is essential when dealing with governor limits, as normal DML operations can only process a limited number of records at once.

8. When batch size is zero or negative then what happens?
==> System.InvalidParameterValueException: batchSize must be greater than or equal to one.


9. What is purpose of Statefull?
==> When you need to maintain state (e.g., counters, lists, maps) across batches
==> When aggregating data (e.g., calculating totals, averages, or summaries)
==> When storing processed records in a list for use in finish method

10. Whats the logic you put in finsh method?
==> Sending an Email Notification
==> Performing Additional DML Operations
==> Calling Another Batch Job (Chaining Batches)
==> Handling Aggregated Results 

11. Select id,name from account where name = 'abc'. In my account object there are no any record which have nmae ='abc'.then waht happen?
==> It will run only start and finish method.

12. 

		
		 
			
	
	
	
	
